plugins {
    id "groovy"
    id "checkstyle"
    id "codenarc"
    id "idea"
    id "maven-publish"
    id "java-gradle-plugin"
    id "com.jfrog.bintray" version "1.8.1"
}

repositories {
    jcenter()
}

def compileAvroVersion = "1.10.0"
def codenarcVersion = "1.5"
def codenarcGroovyVersion = "2.5.10" // Newer version than included in 1.5 required for Java 14 support

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    implementation localGroovy()
    implementation files('avroJar/avro-1.10.0.jar')
    implementation files('avroJar/avro-compiler-1.10.0.jar')
    implementation files('avroJar/avro-ipc-1.10.0.jar')
    implementation "org.apache.velocity:velocity-engine-core:2.2"
    implementation "com.fasterxml.jackson.core:jackson-core:2.11.0"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.11.0"
    //implementation "org.apache.avro:avro-compiler:${compileAvroVersion}"
    testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
    testImplementation gradleTestKit()
    testImplementation "uk.co.datumedge:hamcrest-json:0.2"
    testRuntimeOnly files(createClasspathManifest) // Add the classpath file to the test runtime classpath
}

configurations {
    codenarc {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == "org.codehaus.groovy") {
                if (details.requested.name == "groovy" && details.requested.version != codenarcGroovyVersion) {
                    // Template support appears to have moved between modules in between versions
                    details.useTarget("${details.requested.group}:groovy-all:${codenarcGroovyVersion}")
                } else {
                    details.useVersion codenarcGroovyVersion
                }
                details.because "Required for Java 14+ support"
            }
        }
    }
}

tasks.withType(AbstractCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-options" << "-Werror"
}

version = "0.20.1-SNAPSHOT"
group = "com.commercehub.gradle.plugin"

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier "sources"
    archiveExtension.set("jar")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier "javadoc"
    archiveExtension.set("jar")
}

publishing {
    publications {
        mainMaven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    // dryRun = true
    // publish = true
    user = project.hasProperty("bintrayUserName") ? bintrayUserName : null
    key = project.hasProperty("bintrayApiKey") ? bintrayApiKey : null
    publications = ["mainMaven", "avroBasePluginMarkerMaven", "avroPluginMarkerMaven"]
    pkg {
        repo = "main"
        name = project.name
        userOrg = "commercehub-oss"
        licenses = ["Apache-2.0"]
        desc = "A Gradle plugin to allow easily performing Java code generation for Apache Avro. It supports JSON schema declaration files, JSON protocol declaration files, and Avro IDL files."
        websiteUrl = "https://github.com/davidmc24/gradle-avro-plugin"
        issueTrackerUrl = 'https://github.com/davidmc24/gradle-avro-plugin/issues'
        vcsUrl = "https://github.com/davidmc24/gradle-avro-plugin"
        labels = ["serialization", "avro"]
        githubRepo = "davidmc24/gradle-avro-plugin"
        version {
            name = project.version
            vcsTag = project.version
        }
    }
}

bintrayUpload.dependsOn build, { generatePomFileForAvroBasePluginMarkerMavenPublication }, { generatePomFileForAvroPluginMarkerMavenPublication }

gradlePlugin {
    plugins {
        avro {
            id = "com.commercehub.gradle.plugin.avro"
            implementationClass = "com.commercehub.gradle.plugin.avro.AvroPlugin"
        }
        avroBase {
            id = "com.commercehub.gradle.plugin.avro-base"
            implementationClass = "com.commercehub.gradle.plugin.avro.AvroBasePlugin"
        }
    }
}

idea {
    project {
        vcs = "Git"
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.append(new XmlParser().parseText("""
                <component name="ProjectCodeStyleSettingsManager">
                    <option name="PER_PROJECT_SETTINGS">
                        <value>
                            <option name="LINE_SEPARATOR" value="&#10;"/>
                            <option name="RIGHT_MARGIN" value="140"/>
                        </value>
                    </option>
                    <option name="USE_PER_PROJECT_SETTINGS" value="true"/>
                </component>
                """.stripIndent()))
            }
        }
    }
}

checkstyle {
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
    showViolations = true
    toolVersion = "8.23"
}
// In Gradle 4.8 the checkstyle basedir changed to no longer be the project root by default; thus we need to specify
checkstyleMain {
    configProperties = ['basedir': "$rootDir/config/checkstyle"]
}
checkstyleTest {
    configProperties = ['basedir': "$rootDir/config/checkstyle"]
}

codenarc {
    config = project.resources.text.fromFile("config/codenarc/codenarc.groovy")
    ignoreFailures = false
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 0
    toolVersion = codenarcVersion
}

tasks.create("testAvroCompatibility") {
    description = "Tests cross-compatibility of the plugin with different versions of Avro."
    group = "Verification"
}

tasks.create("testGradleCompatibility") {
    description = "Tests cross-compatibility of the plugin with different versions of Gradle."
    group = "Verification"
}

tasks.create("testKotlinCompatibility") {
    description = "Tests cross-compatibility of the plugin with different versions of Kotlin."
    group = "Verification"
}

tasks.create("testVersionCompatibility") {
    description = "Tests cross-compatibility of the plugin with different versions of Avro, Gradle, and Kotlin."
    group = "Verification"
}

tasks.create("testRecentVersionCompatibility") {
    description = "Tests cross-compatibility of the plugin with recent versions of Avro, Gradle, and Kotlin."
    group = "Verification"
}

// Java 8+ is required due to requirements introduced in Avro 1.9.0
// Java 8+ is also required by Gradle 5.x
sourceCompatibility = 8

def avroVersions = ["1.10.0"]
def keyAvroVersions = avroVersions.last()
def gradle5KotlinVersions =[]
if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
    // Java 10 support was added in Kotlin 1.2.30
    gradle5KotlinVersions.addAll([
        "1.2.20", "1.2.21",
    ])
}
gradle5KotlinVersions.addAll([
    "1.2.30", "1.2.31", "1.2.40", "1.2.41", "1.2.50", "1.2.51", "1.2.60", "1.2.61", "1.2.70", "1.2.71",
    "1.3.0", "1.3.10", "1.3.11",
])
def latestGradleKotlinVersions = [
    "1.3.20", "1.3.21", "1.3.30", "1.3.31", "1.3.40", "1.3.41", "1.3.50", "1.3.60", "1.3.61",
]
def kotlinVersions = gradle5KotlinVersions + latestGradleKotlinVersions
def keyKotlinVersions = [] // First and last version for each supported line
if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
    // Java 10 support was added in Kotlin 1.2.30
    keyKotlinVersions.add("1.2.20")
} else {
    keyKotlinVersions.add("1.2.30")
}
keyKotlinVersions.addAll([
    "1.2.71",
    "1.3.0", "1.3.61",
])
def keyGradleVersions = [] // First and last version for each supported line
def firstSupportedGradleVersion = null
def gradleVersions = []
if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
    // Java 13 support was added in Gradle 6.0
    gradleVersions.addAll("5.1", "5.1.1", "5.2", "5.2.1", "5.3", "5.3.1", "5.4", "5.4.1", "5.5", "5.5.1", "5.6", "5.6.1", "5.6.2", "5.6.3", "5.6.4")
    keyGradleVersions.addAll("5.1", "5.6.4") // First and last for the 5.x line
    firstSupportedGradleVersion = gradleVersions.first()
}
if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
    // Java 14 support was added in Gradle 6.3
    gradleVersions.addAll("6.0", "6.0.1", "6.1", "6.1.1", "6.2", "6.2.1", "6.2.2")
    keyGradleVersions.addAll("6.0", "6.2.2") // First and last for the 6.x line before Java 14 support
}
gradleVersions.addAll("6.3", "6.4", "6.4.1", "6.5")
keyGradleVersions.addAll("6.3", "6.5") // First and last for the 6.x line after Java 14 support

def latestAvroVersion = avroVersions.last()
def latestGradleVersion = gradleVersions.last()
def latestKotlinVersion = kotlinVersions.last()

test {
    systemProperties = [
        avroVersion: compileAvroVersion,
        gradleVersion: gradle.gradleVersion,
        kotlinVersion: latestKotlinVersion,
    ]
}

avroVersions.each { def avroVersion ->
    gradleVersions.each { def gradleVersion ->
        def kotlinVersion = latestKotlinVersion
        def newTask = tasks.create(name: "testAvro${avroVersion}Gradle${gradleVersion}", type: Test) {
            description = "Test cross-compatibility of the plugin with Avro ${avroVersion} and Gradle ${gradleVersion}"
            systemProperties = [
                avroVersion: avroVersion,
                gradleVersion: gradleVersion,
                kotlinVersion: kotlinVersion,
            ]
            reports {
                html.destination = file("$buildDir/reports/tests-avro${avroVersion}-gradle${gradleVersion}")
                junitXml.destination = file("$buildDir/reports/tests-avro${avroVersion}-gradle${gradleVersion}")
            }
        }
        testVersionCompatibility.dependsOn newTask
        if (avroVersion == latestAvroVersion) {
            testGradleCompatibility.dependsOn newTask
        }
        if (gradleVersion == latestGradleVersion) {
            testAvroCompatibility.dependsOn newTask
        }
        if (gradleVersion in keyGradleVersions && avroVersion in keyAvroVersions) {
            testRecentVersionCompatibility.dependsOn newTask
        }
    }
}

gradle5KotlinVersions.each { def kotlinVersion ->
    def avroVersion = latestAvroVersion
    def gradleVersion = firstSupportedGradleVersion
    if (gradleVersion) {
        def newTask = tasks.create(name: "testKotlin${kotlinVersion}", type: Test) {
            description = "Test cross-compatibility of the plugin with Kotlin ${kotlinVersion}"
            systemProperties = [
                avroVersion  : avroVersion,
                gradleVersion: gradleVersion,
                kotlinVersion: kotlinVersion,
            ]
            include("**/KotlinCompatibilityFunctionalSpec.class")
            reports {
                html.destination = file("$buildDir/reports/tests-kotlin${kotlinVersion}-gradle${gradleVersion}")
                junitXml.destination = file("$buildDir/reports/tests-kotlin${kotlinVersion}-gradle${gradleVersion}")
            }
        }
        testVersionCompatibility.dependsOn newTask
        testKotlinCompatibility.dependsOn newTask
        if (kotlinVersion in keyKotlinVersions) {
            testRecentVersionCompatibility.dependsOn newTask
        }
    }
}

latestGradleKotlinVersions.each { def kotlinVersion ->
    def avroVersion = latestAvroVersion
    def gradleVersion = latestGradleVersion
    def newTask = tasks.create(name: "testKotlin${kotlinVersion}", type: Test) {
        description = "Test cross-compatibility of the plugin with Kotlin ${kotlinVersion}"
        systemProperties = [
            avroVersion  : avroVersion,
            gradleVersion: gradleVersion,
            kotlinVersion: kotlinVersion,
        ]
        include("**/KotlinCompatibilityFunctionalSpec.class")
        reports {
            html.destination = file("$buildDir/reports/tests-kotlin${kotlinVersion}-gradle${gradleVersion}")
            junitXml.destination = file("$buildDir/reports/tests-kotlin${kotlinVersion}-gradle${gradleVersion}")
        }
    }
    testVersionCompatibility.dependsOn newTask
    testKotlinCompatibility.dependsOn newTask
    if (kotlinVersion in keyKotlinVersions) {
        testRecentVersionCompatibility.dependsOn newTask
    }
}

tasks.withType(Test) {
    jvmArgs "-Xss320k"
    minHeapSize "120m"
    maxHeapSize "280m"
}
